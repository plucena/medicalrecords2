/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export declare namespace Miscellaneous2TestsContract {
  export type Check16Struct = {
    res16_16: BigNumberish;
    res8_16: BigNumberish;
    res16_8: BigNumberish;
  };

  export type Check16StructOutput = [
    res16_16: bigint,
    res8_16: bigint,
    res16_8: bigint
  ] & { res16_16: bigint; res8_16: bigint; res16_8: bigint };

  export type Check32Struct = {
    res32_32: BigNumberish;
    res8_32: BigNumberish;
    res32_8: BigNumberish;
    res16_32: BigNumberish;
    res32_16: BigNumberish;
  };

  export type Check32StructOutput = [
    res32_32: bigint,
    res8_32: bigint,
    res32_8: bigint,
    res16_32: bigint,
    res32_16: bigint
  ] & {
    res32_32: bigint;
    res8_32: bigint;
    res32_8: bigint;
    res16_32: bigint;
    res32_16: bigint;
  };

  export type Check64Struct = {
    res64_64: BigNumberish;
    res8_64: BigNumberish;
    res64_8: BigNumberish;
    res16_64: BigNumberish;
    res64_16: BigNumberish;
    res32_64: BigNumberish;
    res64_32: BigNumberish;
  };

  export type Check64StructOutput = [
    res64_64: bigint,
    res8_64: bigint,
    res64_8: bigint,
    res16_64: bigint,
    res64_16: bigint,
    res32_64: bigint,
    res64_32: bigint
  ] & {
    res64_64: bigint;
    res8_64: bigint;
    res64_8: bigint;
    res16_64: bigint;
    res64_16: bigint;
    res32_64: bigint;
    res64_32: bigint;
  };

  export type AllGTCastingValuesStruct = {
    a8_s: BigNumberish;
    b8_s: BigNumberish;
    a16_s: BigNumberish;
    b16_s: BigNumberish;
    a32_s: BigNumberish;
    b32_s: BigNumberish;
    a64_s: BigNumberish;
    b64_s: BigNumberish;
  };

  export type AllGTCastingValuesStructOutput = [
    a8_s: bigint,
    b8_s: bigint,
    a16_s: bigint,
    b16_s: bigint,
    a32_s: bigint,
    b32_s: bigint,
    a64_s: bigint,
    b64_s: bigint
  ] & {
    a8_s: bigint;
    b8_s: bigint;
    a16_s: bigint;
    b16_s: bigint;
    a32_s: bigint;
    b32_s: bigint;
    a64_s: bigint;
    b64_s: bigint;
  };
}

export interface Miscellaneous2TestsContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "decryptAndCompareResults16"
      | "decryptAndCompareResults32"
      | "decryptAndCompareResults64"
      | "divTest"
      | "getBoolResult"
      | "getResult"
      | "muxTest"
      | "notTest"
      | "offboardOnboardTest"
      | "remTest"
      | "setPublicValues"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "decryptAndCompareResults16",
    values: [Miscellaneous2TestsContract.Check16Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "decryptAndCompareResults32",
    values: [Miscellaneous2TestsContract.Check32Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "decryptAndCompareResults64",
    values: [Miscellaneous2TestsContract.Check64Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "divTest",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBoolResult",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getResult", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "muxTest",
    values: [boolean, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "notTest", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "offboardOnboardTest",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "remTest",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPublicValues",
    values: [
      Miscellaneous2TestsContract.AllGTCastingValuesStruct,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "decryptAndCompareResults16",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decryptAndCompareResults32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decryptAndCompareResults64",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "divTest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBoolResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getResult", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "muxTest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "notTest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "offboardOnboardTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "remTest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPublicValues",
    data: BytesLike
  ): Result;
}

export interface Miscellaneous2TestsContract extends BaseContract {
  connect(runner?: ContractRunner | null): Miscellaneous2TestsContract;
  waitForDeployment(): Promise<this>;

  interface: Miscellaneous2TestsContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  decryptAndCompareResults16: TypedContractMethod<
    [check16: Miscellaneous2TestsContract.Check16Struct],
    [bigint],
    "nonpayable"
  >;

  decryptAndCompareResults32: TypedContractMethod<
    [check32: Miscellaneous2TestsContract.Check32Struct],
    [bigint],
    "nonpayable"
  >;

  decryptAndCompareResults64: TypedContractMethod<
    [check64: Miscellaneous2TestsContract.Check64Struct],
    [bigint],
    "nonpayable"
  >;

  divTest: TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getBoolResult: TypedContractMethod<[], [boolean], "view">;

  getResult: TypedContractMethod<[], [bigint], "view">;

  muxTest: TypedContractMethod<
    [selectionBit: boolean, a: BigNumberish, b: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  notTest: TypedContractMethod<[a: boolean], [boolean], "nonpayable">;

  offboardOnboardTest: TypedContractMethod<
    [a8: BigNumberish, a16: BigNumberish, a32: BigNumberish, a64: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  remTest: TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  setPublicValues: TypedContractMethod<
    [
      castingValues: Miscellaneous2TestsContract.AllGTCastingValuesStruct,
      a: BigNumberish,
      b: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "decryptAndCompareResults16"
  ): TypedContractMethod<
    [check16: Miscellaneous2TestsContract.Check16Struct],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decryptAndCompareResults32"
  ): TypedContractMethod<
    [check32: Miscellaneous2TestsContract.Check32Struct],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decryptAndCompareResults64"
  ): TypedContractMethod<
    [check64: Miscellaneous2TestsContract.Check64Struct],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "divTest"
  ): TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBoolResult"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getResult"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "muxTest"
  ): TypedContractMethod<
    [selectionBit: boolean, a: BigNumberish, b: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "notTest"
  ): TypedContractMethod<[a: boolean], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "offboardOnboardTest"
  ): TypedContractMethod<
    [a8: BigNumberish, a16: BigNumberish, a32: BigNumberish, a64: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "remTest"
  ): TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPublicValues"
  ): TypedContractMethod<
    [
      castingValues: Miscellaneous2TestsContract.AllGTCastingValuesStruct,
      a: BigNumberish,
      b: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
