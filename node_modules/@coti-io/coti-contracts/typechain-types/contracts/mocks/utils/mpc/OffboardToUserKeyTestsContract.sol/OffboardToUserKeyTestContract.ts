/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common";

export interface OffboardToUserKeyTestContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getCTs"
      | "getCt"
      | "getUserKey"
      | "getUserKeyTest"
      | "getX"
      | "offboardToUserTest"
      | "userKeyTest"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "AccountOnboarded"): EventFragment;

  encodeFunctionData(functionFragment: "getCTs", values?: undefined): string;
  encodeFunctionData(functionFragment: "getCt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getUserKey",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserKeyTest",
    values: [BytesLike, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "getX", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "offboardToUserTest",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userKeyTest",
    values: [BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "getCTs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getCt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getUserKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserKeyTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getX", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "offboardToUserTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userKeyTest",
    data: BytesLike
  ): Result;
}

export namespace AccountOnboardedEvent {
  export type InputTuple = [_from: AddressLike, userKey: BytesLike];
  export type OutputTuple = [_from: string, userKey: string];
  export interface OutputObject {
    _from: string;
    userKey: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OffboardToUserKeyTestContract extends BaseContract {
  connect(runner?: ContractRunner | null): OffboardToUserKeyTestContract;
  waitForDeployment(): Promise<this>;

  interface: OffboardToUserKeyTestContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getCTs: TypedContractMethod<[], [[bigint, bigint, bigint, bigint]], "view">;

  getCt: TypedContractMethod<[], [bigint], "view">;

  getUserKey: TypedContractMethod<[], [string], "view">;

  getUserKeyTest: TypedContractMethod<
    [signedEK: BytesLike, signature: BytesLike, addr: AddressLike],
    [bigint],
    "nonpayable"
  >;

  getX: TypedContractMethod<[], [bigint], "view">;

  offboardToUserTest: TypedContractMethod<
    [a: BigNumberish, addr: AddressLike],
    [[bigint, bigint, bigint, bigint]],
    "nonpayable"
  >;

  userKeyTest: TypedContractMethod<
    [signedEK: BytesLike, signature: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getCTs"
  ): TypedContractMethod<[], [[bigint, bigint, bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "getCt"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserKey"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getUserKeyTest"
  ): TypedContractMethod<
    [signedEK: BytesLike, signature: BytesLike, addr: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getX"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "offboardToUserTest"
  ): TypedContractMethod<
    [a: BigNumberish, addr: AddressLike],
    [[bigint, bigint, bigint, bigint]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userKeyTest"
  ): TypedContractMethod<
    [signedEK: BytesLike, signature: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AccountOnboarded"
  ): TypedContractEvent<
    AccountOnboardedEvent.InputTuple,
    AccountOnboardedEvent.OutputTuple,
    AccountOnboardedEvent.OutputObject
  >;

  filters: {
    "AccountOnboarded(address,bytes)": TypedContractEvent<
      AccountOnboardedEvent.InputTuple,
      AccountOnboardedEvent.OutputTuple,
      AccountOnboardedEvent.OutputObject
    >;
    AccountOnboarded: TypedContractEvent<
      AccountOnboardedEvent.InputTuple,
      AccountOnboardedEvent.OutputTuple,
      AccountOnboardedEvent.OutputObject
    >;
  };
}
